import asyncio
import sys
import os

# FIX –¥–ª—è Windows
if sys.platform == 'win32':
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from db.database import init_db_pool, close_db_pool, get_db_connection
from auth import create_access_token


async def create_test_users():
    """Create sample test users across all roles and departments"""

    print("üöÄ Creating test users...")
    await init_db_pool()

    # Sample users data
    test_users = [
        # HR Users
        {
            "name": "HR",
            "surname": "Manager",
            "phone": "+77001111111",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "HR Manager",
            "role": "hr",
            "department_id": 7  # HR department
        },
        {
            "name": "HR",
            "surname": "Specialist",
            "phone": "+77001111112",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "HR Specialist",
            "role": "hr",
            "department_id": 7
        },

        # Backend Development Managers
        {
            "name": "–ë–µ–∫–µ–Ω–¥",
            "surname": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
            "phone": "+77002222221",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Backend Team Lead",
            "role": "manager",
            "department_id": 1  # Backend Development
        },

        # Frontend Development Manager
        {
            "name": "–§—Ä–æ–Ω—Ç–µ–Ω–¥",
            "surname": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
            "phone": "+77002222222",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Frontend Team Lead",
            "role": "manager",
            "department_id": 2  # Frontend Development
        },

        # Mobile Development Manager
        {
            "name": "–ú–æ–±–∞–π–ª",
            "surname": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
            "phone": "+77002222223",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Mobile Team Lead",
            "role": "manager",
            "department_id": 3  # Mobile Development
        },

        # Data Science Manager
        {
            "name": "–î–∞—Ç–∞",
            "surname": "–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å",
            "phone": "+77002222224",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Data Science Lead",
            "role": "manager",
            "department_id": 4  # Data Science
        },

        # Backend Employees
        {
            "name": "–ê–ª–µ–∫—Å–µ–π",
            "surname": "–ò–≤–∞–Ω–æ–≤",
            "phone": "+77003333331",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Python Developer",
            "role": "employee",
            "department_id": 1  # Backend Development
        },
        {
            "name": "–î–º–∏—Ç—Ä–∏–π",
            "surname": "–ü–µ—Ç—Ä–æ–≤",
            "phone": "+77003333332",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Java Developer",
            "role": "employee",
            "department_id": 1
        },
        {
            "name": "–°–µ—Ä–≥–µ–π",
            "surname": "–°–∏–¥–æ—Ä–æ–≤",
            "phone": "+77003333333",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Go Developer",
            "role": "employee",
            "department_id": 1
        },

        # Frontend Employees
        {
            "name": "–ê–Ω–Ω–∞",
            "surname": "–°–º–∏—Ä–Ω–æ–≤–∞",
            "phone": "+77003333334",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "React Developer",
            "role": "employee",
            "department_id": 2  # Frontend Development
        },
        {
            "name": "–ú–∞—Ä–∏—è",
            "surname": "–ö–æ–∑–ª–æ–≤–∞",
            "phone": "+77003333335",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Angular Developer",
            "role": "employee",
            "department_id": 2
        },

        # Mobile Employees
        {
            "name": "–ò–≤–∞–Ω",
            "surname": "–ú–æ—Ä–æ–∑–æ–≤",
            "phone": "+77003333336",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "iOS Developer",
            "role": "employee",
            "department_id": 3  # Mobile Development
        },
        {
            "name": "–ü–∞–≤–µ–ª",
            "surname": "–ù–æ–≤–∏–∫–æ–≤",
            "phone": "+77003333337",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Android Developer",
            "role": "employee",
            "department_id": 3
        },

        # Data Science Employees
        {
            "name": "–ï–ª–µ–Ω–∞",
            "surname": "–í–æ–ª–∫–æ–≤–∞",
            "phone": "+77003333338",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Data Scientist",
            "role": "employee",
            "department_id": 4  # Data Science
        },
        {
            "name": "–û–ª—å–≥–∞",
            "surname": "–°–æ–∫–æ–ª–æ–≤–∞",
            "phone": "+77003333339",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "Data Analyst",
            "role": "employee",
            "department_id": 4
        },

        # QA Employees
        {
            "name": "–ê–Ω–¥—Ä–µ–π",
            "surname": "–õ–µ–±–µ–¥–µ–≤",
            "phone": "+77003333340",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "QA Engineer",
            "role": "employee",
            "department_id": 5  # QA
        },

        # DevOps Employees
        {
            "name": "–ù–∏–∫–æ–ª–∞–π",
            "surname": "–ï–≥–æ—Ä–æ–≤",
            "phone": "+77003333341",
            "company": "–•–∞–ª—ã–∫ –±–∞–Ω–∫",
            "job_title": "DevOps Engineer",
            "role": "employee",
            "department_id": 6  # DevOps
        }
    ]

    created_count = 0
    skipped_count = 0

    async with get_db_connection() as conn:
        async with conn.cursor() as cur:
            for user_data in test_users:
                try:
                    # Check if user already exists
                    await cur.execute(
                        "SELECT id FROM users WHERE phone = %s",
                        (user_data["phone"],)
                    )
                    existing = await cur.fetchone()

                    if existing:
                        print(f"‚ö™ Skipped: {user_data['name']} {user_data['surname']} (phone already exists)")
                        skipped_count += 1
                        continue

                    # Create user
                    await cur.execute(
                        """INSERT INTO users (name, surname, phone, company, job_title, role, department_id)
                           VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING id""",
                        (
                            user_data["name"],
                            user_data["surname"],
                            user_data["phone"],
                            user_data["company"],
                            user_data["job_title"],
                            user_data["role"],
                            user_data["department_id"]
                        )
                    )
                    user_id = (await cur.fetchone())[0]

                    # Get department name
                    await cur.execute("SELECT name FROM departments WHERE id = %s", (user_data["department_id"],))
                    dept_name = (await cur.fetchone())[0]

                    role_emoji = "üëî" if user_data["role"] == "hr" else "üë®‚Äçüíº" if user_data["role"] == "manager" else "üë®‚Äçüíª"

                    print(f"‚úÖ Created: {role_emoji} {user_data['name']} {user_data['surname']} - {user_data['role']} @ {dept_name}")
                    print(f"   Phone: {user_data['phone']}")
                    created_count += 1

                except Exception as e:
                    print(f"‚ùå Error creating {user_data['name']} {user_data['surname']}: {e}")

    await close_db_pool()

    print(f"\n{'='*60}")
    print(f"üìä SUMMARY")
    print(f"{'='*60}")
    print(f"‚úÖ Created: {created_count} users")
    print(f"‚ö™ Skipped: {skipped_count} users (already exist)")
    print(f"üì± Total: {len(test_users)} users processed")
    print(f"{'='*60}")

    print("\nüìã TEST CREDENTIALS:")
    print("=" * 60)
    print("\nüîê HR Users (can view ALL departments):")
    print("   Phone: +77001111111 (HR Manager)")
    print("   Phone: +77001111112 (HR Specialist)")

    print("\nüë®‚Äçüíº Managers (can view ONLY their department):")
    print("   Phone: +77002222221 (Backend Team Lead)")
    print("   Phone: +77002222222 (Frontend Team Lead)")
    print("   Phone: +77002222223 (Mobile Team Lead)")
    print("   Phone: +77002222224 (Data Science Lead)")

    print("\nüë®‚Äçüíª Employees (by department):")
    print("   Backend Development:")
    print("      +77003333331 - –ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤ (Python)")
    print("      +77003333332 - –î–º–∏—Ç—Ä–∏–π –ü–µ—Ç—Ä–æ–≤ (Java)")
    print("      +77003333333 - –°–µ—Ä–≥–µ–π –°–∏–¥–æ—Ä–æ–≤ (Go)")
    print("   Frontend Development:")
    print("      +77003333334 - –ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞ (React)")
    print("      +77003333335 - –ú–∞—Ä–∏—è –ö–æ–∑–ª–æ–≤–∞ (Angular)")
    print("   Mobile Development:")
    print("      +77003333336 - –ò–≤–∞–Ω –ú–æ—Ä–æ–∑–æ–≤ (iOS)")
    print("      +77003333337 - –ü–∞–≤–µ–ª –ù–æ–≤–∏–∫–æ–≤ (Android)")
    print("   Data Science:")
    print("      +77003333338 - –ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞ (Data Scientist)")
    print("      +77003333339 - –û–ª—å–≥–∞ –°–æ–∫–æ–ª–æ–≤–∞ (Data Analyst)")
    print("   QA:")
    print("      +77003333340 - –ê–Ω–¥—Ä–µ–π –õ–µ–±–µ–¥–µ–≤")
    print("   DevOps:")
    print("      +77003333341 - –ù–∏–∫–æ–ª–∞–π –ï–≥–æ—Ä–æ–≤")

    print("\n" + "=" * 60)
    print("üí° To login, use any phone number above")
    print("=" * 60)


async def main():
    await create_test_users()


if __name__ == "__main__":
    asyncio.run(main())
